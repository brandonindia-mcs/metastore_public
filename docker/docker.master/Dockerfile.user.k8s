FROM user:base AS devcontainer
ENV DEBIAN_FRONTEND=noninteractive
ARG THISUSER
ARG HOMEDIR=/home
ARG USERHOME=$HOMEDIR/$THISUSER
USER $THISUSER
WORKDIR $USERHOME

FROM devcontainer AS devapps

# RUN sudo az aks install-cli
# RUN sudo az extension add --name aks-preview

# FROM rubyrails AS k8s
# Install kubectl and Helm
RUN curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"\
  && curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl.sha256"\
  && echo "$(cat kubectl.sha256)  kubectl" | sha256sum --check\
  && sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
RUN rm -rf ~/kubectl*
# RUN cat >>~/.bashrc <<EOF
# echo kubectl: \$(kubectl version --client)
# EOF

RUN curl -O https://get.helm.sh/helm-v3.18.4-linux-amd64.tar.gz\
  && tar zxf helm-v3.18.4-linux-amd64.tar.gz\
  && sudo mv linux-amd64/helm /usr/local/bin\
  && rm -rf helm-v3.18.4-linux-amd64.tar.gz linux-amd64
# RUN cat >>~/.bashrc <<EOF
# helm version
# EOF

# FROM k8s AS tf
# Install Terraform
RUN wget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg\
  && echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list\
  && sudo apt-get update\
  && sudo apt-get install -y -qq terraform
RUN sudo update-alternatives --install /usr/bin/tf tf /usr/bin/terraform 10\
  && sudo apt-get -qq update\
  && sudo apt-get -qq install -y\
    apt-transport-https \
    ca-certificates\
    gnupg-agent\
    software-properties-common
RUN sudo apt-get install -y zip

# FROM mongo AS postgresclient
RUN sudo apt install -y postgresql-client\
  && sudo apt install -y\
    inetutils-tools\
    dnsutils\
    traceroute\
    bind9-host\
    locales\
  && sudo locale-gen en_US.UTF-8\
  && sudo update-locale LANG=en_US.UTF-8

  RUN sudo apt-get install -y wget apt-transport-https software-properties-common\
  && VERSION_ID=$(cat /etc/os-release|grep VERSION_ID|awk -F= '{print $2}'|sed 's/"//g')\
  && wget -q https://packages.microsoft.com/config/ubuntu/$VERSION_ID/packages-microsoft-prod.deb\
  && sudo dpkg -i packages-microsoft-prod.deb\
  && rm packages-microsoft-prod.deb\
  && sudo apt-get update\
  && sudo apt-get install -y powershell

RUN sudo apt-get install -y\
  bsdmainutils\
  gettext\
  netcat

RUN sudo apt update && sudo apt install -y cron tree
# FROM postgresclient AS bashrc
FROM devapps AS bashrc

COPY assets.docker/git-prompt.sh $USERHOME/git-prompt.sh
RUN cat >>~/.bashrc <<EOF
. ~/git-prompt.sh
function set_ps1 {
PS1_ON="\[\033[0m\]on"
PS1_COLON="\[\033[1;33m\]:"
PS1_HOST="\[\033[0;34m\]\h"
PS1_BRACKET_o="\[\033[0;33m\]["
PS1_BRACKET_c="\[\033[0;33m\]]"

PS1_GITSSH="\[\033[0;36m\]\\\`basename \\\$(git config --get-regexp "ssh.identity"|tail -1|awk '{ print \\\$2 }')\\\`"
PS1_REPO="\[\033[0;36m\]\\\`git remote -v|head -1 2>/dev/null|awk '{print \\\$2}'\\\`"
PS1_DATE="\[\033[0;31m\]\\\`date +%Y-%m-%d\ %H:%M:%S\\\`"
PS1_GITUSER="\[\033[0;36m\]\\\`git config --get-regexp \"user.email\"|tail -1|sed \"s/user\.email//\"\\\`"
PS1_BRANCH="\[\033[0;36m\]\\\`__git_ps1\\\`"
PS1_OS="\[\033[3;34m\]\$(grep -iE ^ID= /etc/os-release 2>/dev/null|awk -F= '{print \$2}'|awk '{print \$1}')"
PS1_USER="\[\033[3;34m\]\u\[\033[0m\]"
PS1_HOST="\[\033[3;34m\]\h\[\033[0m\]"
PS1_PWD="\[\033[0;37m\]\w\[\033[0m\]"
if [ ! -z "\$VIRTUAL_ENV_PROMPT" ];then PS1_PY_ENV="\[\033[0;35m\](\`basename \$VIRTUAL_ENV\`)";fi

PS1_GITLINE="\${PS1_GITSSH}\${PS1_COLON} \${PS1_REPO}"
PS1_USERATHOST="\${PS1_USER}\[\033[2;37m\]@\[\033[0m\]\${PS1_HOST}\${PS1_BRANCH}\${PS1_PY_ENV}"
PS1_RM="\[\033[0;31m\]\${__RM__}"
ps1=
ps1+="\n\${PS1_USERATHOST}"
ps1+="\n\${PS1_GITLINE}"
ps1+="\n\${PS1_DATE} \${PS1_BRACKET_o}\${PS1_PWD}\${PS1_BRACKET_c}"
ps1+="\n\${PS1_RM}\[\033[1;32m\]\$ \[\033[0m\]"
echo \$ps1
}
export PS1=\$(set_ps1)
EOF

# RUN mkdir -p $USERHOME/bin && echo "\
# [user]\n\
#   name = \$gitname\n\
#   email = \$gitemail\n\
# [core]\n\
#   excludesfile = ~/gitignore_global\n\
#   editor = vim\n\
#   autocrlf = true\n\
# [init]\n\
#   defaultBranch = master\n\
# [advice]\n\
#   statusHints = false\n\
# [ssh]\n\
#   identity = \$gitkey"\
# >$USERHOME/.gitconfig

RUN cat >>~/.bashrc <<EOF
echo "[user]
  name = \"\$gitname\"
  email = \$gituser
[core]
  excludesfile = ~/gitignore_global
  editor = vim
  autocrlf = input
[init]
  defaultBranch = master
[advice]
  statusHints = false
[ssh]
  identity = \$gitkey
[safe]
	directory = /home/developer/devnet/appdev"\
  >~/.gitconfig
EOF

RUN cat >>~/.bashrc <<EOF
# if [ ! -d \$NVM_HOME ];then install_nvm;fi
# installnode
# getyarn
# nodever
# az version
# dockertest

# RUN cat >>~/.bashrc <<EOF
alias py=python
echo python: \$(py -V)
echo pip: \$(pip -V)
echo openssl \$(openssl version)

# RUN cat >>~/.bashrc <<EOF
echo kubectl: \$(kubectl version --client)

# RUN cat >>~/.bashrc <<EOF
echo helm: \$(helm version)

# RUN cat >>~/.bashrc <<EOF
. ~/appdev/bashrc-hook.sh
EOF

FROM bashrc AS ending
USER root
ARG SK
ARG SKP=$USERHOME/.ssh
ARG FSK=$SKP/$SK
RUN mkdir -p $SKP && chmod 755 $SKP
RUN --mount=type=secret,id=$SK cat /run/secrets/$SK >$FSK
COPY assets.docker/$SK.pub $SKP
RUN chmod 400 $FSK\
  && chmod 444 $FSK.pub\
  && chown 1000 $SKP\
  && apt-get clean\
  && rm -rf /var/lib/apt/lists/*

RUN cat >/entrypoint.sh <<EOF
#!/bin/bash
set -euo pipefail
echo "Setting ownership of \${VOL_MNT} to \$(id -u):\$(id -g)"
sudo chown -R \$(id -u):\$(id -g) "\${VOL_MNT}"
if [ \$# -eq 0 ]; then
  exec bash
else
  exec "\$@"
fi
EOF

RUN chmod +x /entrypoint.sh
# Set entrypoint
# ENTRYPOINT ["/entrypoint.sh"]
# CMD ["/bin/bash"]

USER $THISUSER
RUN git config --global ssh.identity $SKP/$SK

ARG BUILD_DATE
LABEL build-date=${BUILD_DATE}
RUN echo 'echo -e "\\nuser image ('${BUILD_DATE}')"\n\
'>>~/.bashrc

RUN sudo usermod -a -G docker $(whoami)

# VOLUME ["/var/run/docker.sock"]
# VOLUME ["/var/lib/docker"]

# Sat Aug 23 19:24:42 CDT 2025
# Command: buildcontainer -t k8s user

# Sun Sep 21 11:57:49 CDT 2025
# Command: 
# cat $SECURE_ASSETS/../docker.master/Dockerfile.user.k8s >$SECURE_ASSETS/../Dockerfile.user\
#   && image -t k8s user

# Sat Oct 11 10:16:15 CDT 2025
# Command: 
# cat $SECURE_ASSETS/../docker.master/Dockerfile.user.k8s >$SECURE_ASSETS/../Dockerfile.user\
#   && image -t k8s user
